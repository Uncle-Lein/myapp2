import telebot
from telebot import types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '8090540025:AAHTwjbfXSUh0R8fcc83XfFypF1lA-M09Vw'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(BOT_TOKEN)

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1002815033595  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –º–∏–Ω—É—Å –∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫!

# URL –≤–∞—à–µ–≥–æ Mini App
WEB_APP_URL = "https://ghostly-singular-seriema.cloudpub.ru/"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_user_subscribed(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    if is_user_subscribed(user_id):
        show_app_button(message)
    else:
        show_subscription_prompt(message)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ Mini App
def show_app_button(message):
    markup = types.InlineKeyboardMarkup()
    web_app_button = types.WebAppInfo(url=WEB_APP_URL)
    markup.add(types.InlineKeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app_button))
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def show_subscription_prompt(message):
    markup = types.InlineKeyboardMarkup()
    subscribe_btn = types.InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/SchoolGPTtest")
    check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
    markup.add(subscribe_btn)
    markup.add(check_btn)
    bot.reply_to(message, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ üëá", reply_markup=markup)

# Callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    if is_user_subscribed(user_id):
        bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
        show_app_button(call.message)
    else:
        bot.answer_callback_query(call.id, "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", show_alert=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)